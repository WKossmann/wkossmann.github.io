
:stem:
:toc: left
:toc-title: Sumário
:last-update-label!:
:source-highlighter: pygments

= Respostas Exercícios de PDI
Willian Kossmann <kossmannwillian@outlook.com>
05/08/2017
:appversion: 1.0.0

Site para hospedagem das respostas dos exercicios propostos no link:http://agostinhobritojr.github.io/tutoriais/pdi/[tutorial^] do Prof. Dr. Agostinho Brito Jr. 

== Exercicios 3.2 ==

Esta seção é apenas uma introdução a manipulação dos pixels de uma imagem usando diretamente o metodo .at da classe Mat.

=== Exercicio 3.2.1 - Regions ===

* Desenvolvimento:

É solicitado ao usuário dois pontos pertecentes ao interior da imagem, posteriormente é feita a ordenação dos pontos para 
facilitar a varredura da imagem. Logo depois a área definida pelos pontos de interesse é preenchida com a negativa da cor 
anterior, ou seja, subtrair 255 (valor máximo) do valor anterior. Ao fim é mostrado ao usuáro o resultado final.	
	
* Resultados:

Para teste do algoritmo, foi informado inicialmente (20,30) e (130,270) para teste dos limites de entrada e depois inserido 
(130,170). Os resultados foram como esperado.

[[fig_regionsT, Regions]]
//[.text-center]
.Terminal programa Regions
image::ativ3.2/terRegions.png[title="Terminal programa Regions"]

[[fig_regionsR, Regions]]
//[.text-center]
.Saída do programa Regions
image::ativ3.2/resRegions.png[title="Saída do programa Regions"]

* Código: 

[[exa_regions, Regions]]
[source,cpp]
.regions.cpp
----
include::ativ3.2/regions.cpp[]
----

=== Exercicio 3.2.2 - TrocaRegioes ===

* Desenvolvimento:

Para podermos trocar as regioes da imagem, primeiro é nescessário fazer uma cópia da imagem original para depois poder altera-la, 
caso contrário, parte da imagem será perdida. Foi observado neste processo que ao usar o construtor de cópia normal da 
classe Mat do OpenCV, ele não realizava realmente uma cópia das informações apenas passava o ponteiro. 
Neste caso devemos usar o metodo .clone() para efetivamente fazer uma cópia e poder alterá-la sem modificar a matriz original.

A partir disso foi implementado 4 laços pra copiar as informações dos quadrantes diagonais da matriz "entrada" para a matriz 
"saida".  

* Resultados:

Utilizado a imagem biel.png .

[[fig_trocaregioesE, Regions]]
//[.text-center]
.Saída do programa TrocaRegioes
image::ativ3.2/resTrocaRegioes.png[title="Saída do programa TrocaRegioes"]

* Código: 

[[exa_trocaregioes, Regions]]
[source,cpp]
.trocaregioes.cpp
----
include::ativ3.2/trocaregioes.cpp[]
----

== Exercicios 4.2 ==

Esta seção é uma introdução a indentificação de objetos na imagem, juntamente com noções do uso da função floodFill() do OpenCV.

=== Exercicio 4.2.1 - Solução ===

* Desenvolvimento:

Para resolver o problema do limite de objetos do programa labeling.cpp apresentado como exemplo, existem várias formas. A que eu considerei mais simples e fácil é utilizar os recursos da própria classe Mat, explorando não apenas os 255 valores possiveis de cores em tons de cinza, e sim utilizar os possíveis valores das cores RGB. Com isso aumentamos a capacidade deintr rotulação de 255 para 16.581.375 (255x255x255). Ou seja cada objeto é rotulado com 3 "IDs" dentro do campo RGB.

* Resultados:

Para a mesma imagem usada no exemplo do tutorial, podemos notar que as bolhas estão no tom de verde, pois é o que inicia na contagem. Podemos 
observar tambem que a contagem de objetos (bolhas) para esta imagem foi de 32.

[[fig_solucaoT, Solucao]]
//[.text-center]
.Terminal do programa Solucao
image::ativ4.2/terSolucao.png[title="Terminal do programa Solucao"]

[[fig_solucaoI, Solucao]]
//[.text-center]
.Saída do programa Solucao
image::ativ4.2/resSolucao.png[title="Saída do programa Solucao"]

* Código: 

[[exa_solucao, Solucao]]
[source,cpp]
.solucao.cpp
----
include::ativ4.2/solucao.cpp[]
----
